import logging
import datetime
import requests
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
)
from deep_translator import GoogleTranslator

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

API_WEATHER = "3ecd72d6-71c7-423b-a4e9-8f0e28001fc5"
TOKEN = "7917742805:AAFaZFgyFkSQIlkm-n6PC3D577LwTYYuQT0"
DEFAULT_TARGET_LANG = "ru"
POPULAR_LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
    'zh': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'ar': '–ê—Ä–∞–±—Å–∫–∏–π',
    'hi': '–•–∏–Ω–¥–∏',
    'tr': '–¢—É—Ä–µ—Ü–∫–∏–π',
    'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
    'pl': '–ü–æ–ª—å—Å–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π'
}

class TranslationBot:
    def __init__(self):
        self.target_lang = DEFAULT_TARGET_LANG
        self.translator = GoogleTranslator(source='auto', target=DEFAULT_TARGET_LANG)

    async def info(self, message):
        with open('info.txt', "a", encoding="utf-8") as f:
            time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"[{time}] {message}\n")

    async def start(self, update, context):
        user = update.effective_user
        info_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞"
        await self.info(info_msg)

        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –°–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–æ–∂—É –Ω–∞ {self.target_lang}.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/langs - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏\n"
            "/lang <–∫–æ–¥> - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä /lang en)\n"
            "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )

    async def help_command(self, update, context):
        await update.message.reply_text(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/lang <–∫–æ–¥> - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/langs - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏\n"
            "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
            "/current - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    async def show_languages(self, update, context):
        languages_list = "\n".join([f"{code} - {name}" for code, name in POPULAR_LANGUAGES.items()])
        await update.message.reply_text(
            "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:\n\n"
            f"{languages_list}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /lang <–∫–æ–¥>\n"
            "–ü—Ä–∏–º–µ—Ä: /lang en"
        )

    async def set_language(self, update, context):
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä /lang en)")
            return

        self.target_lang = context.args[0].lower()
        self.translator.target = self.target_lang
        await update.message.reply_text(f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.target_lang}")

    async def show_settings(self, update, context):
        await update.message.reply_text(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {self.target_lang}"
        )

    async def translate_text(self, update, context):
        text = update.message.text.strip()
        await self.info(f"User {update.effective_user.id} –•–æ—á–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: {text}")

        if not text:
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        try:
            translation = self.translator.translate(text)
            await update.message.reply_text(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translation}")
        except Exception as e:
            logger.error(f"Translation error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def get_weather_by_city(self, update, context):
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
            return

        city_name = ' '.join(context.args)
        await self.info(f"User {update.effective_user.id} –•–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ: {city_name}")

        try:
            geocode_url = "https://geocode-maps.yandex.ru/1.x/"
            geocode_params = {
                "apikey": '8013b162-6b42-4997-9691-77b7074026e0',
                "format": "json",
                "geocode": city_name,
                "results": 1,
            }

            geo_response = requests.get(geocode_url, params=geocode_params)
            geo_response.raise_for_status()
            geo_data = geo_response.json()

            features = geo_data["response"]["GeoObjectCollection"]["featureMember"]
            if not features:
                await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            pos = features[0]["GeoObject"]["Point"]["pos"]
            lon, lat = pos.split()

            weather_url = "https://api.weather.yandex.ru/v2/forecast"
            weather_params = {
                "lat": lat,
                "lon": lon,
                "lang": "ru_RU",
                "limit": 1,
            }
            weather_headers = {"X-Yandex-API-Key": API_WEATHER}

            weather_response = requests.get(
                weather_url,
                params=weather_params,
                headers=weather_headers,
            )
            weather_response.raise_for_status()
            weather_data = weather_response.json()

            fact = weather_data["fact"]

            conditions = {
                "clear": "—è—Å–Ω–æ ‚òÄÔ∏è",
                "partly-cloudy": "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§",
                "cloudy": "–æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
                "overcast": "–ø–∞—Å–º—É—Ä–Ω–æ üå´",
                "rain": "–¥–æ–∂–¥—å üåß",
                "thunderstorm": "–≥—Ä–æ–∑–∞ ‚ö°Ô∏è",
                "snow": "—Å–Ω–µ–≥ ‚ùÑÔ∏è",
            }

            weather_condition = conditions.get(fact["condition"], fact["condition"])

            weather_message = (
                f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {fact['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {fact['feels_like']}¬∞C)\n"
                f"‚Ä¢ –ü–æ–≥–æ–¥–∞: {weather_condition}\n"
                f"‚Ä¢ –í–µ—Ç–µ—Ä: {fact['wind_speed']} –º/—Å, {fact['wind_dir']}\n"
                f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: {fact['pressure_mm']} –º–º —Ä—Ç. —Å—Ç.\n"
                f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {fact['humidity']}%"
            )

            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"Weather API error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    bot = TranslationBot()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("help", bot.help_command))
    app.add_handler(CommandHandler("lang", bot.set_language))
    app.add_handler(CommandHandler("langs", bot.show_languages))
    app.add_handler(CommandHandler("current", bot.show_settings))
    app.add_handler(CommandHandler("weather", bot.get_weather_by_city))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.translate_text))

    logger.info("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! —É—Ä–∞")
    app.run_polling()


if __name__ == '__main__':
    main()